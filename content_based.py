# -*- coding: utf-8 -*-
"""content-based.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Wgr0WRWk7_4UCwaeCzsK78XRiuv1Nd4H

## Import Libary dan dataset
"""

import pandas as pd
import numpy as np
import warnings
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import matplotlib.pyplot as plt


warnings.filterwarnings('ignore')

df = pd.read_csv('/content/tourism_rating.csv')
df1 = pd.read_csv('/content/tourism_with_id.csv')

"""## Exploratory Data Analysis

Dataset tourism_rating
"""

# menampilkan 3 overview dataset df secara random
df.sample(3)

# cek dimensi pada dataset df
print("Total Rows: {} dan Cols: {}".format(df.shape[0], df.shape[1]))

# cek informasi dari tiap fitur df
df.info()

# cek total user pada dataset df
len(df['User_Id'].unique())

# cek total place yang diberi rating 
len(df['Place_Id'].unique())

# cek statistika deskripsi dari dataset
df.describe()

"""Dataset tourism_with_id  """

# menampilkan 3 overview dataset df1 secara random
df1.sample(3)

# cek dimensi pada dataset df1
print("Total Rows: {} dan Cols: {}".format(df1.shape[0], df1.shape[1]))

# cek informasi dari tiap fitur df1
df1.info()

# cek total place pada dataset df1
len(df1['Place_Id'].unique())

# cek sebaran kota wisata pada dataset
cols = df1['City'].value_counts()
cols = cols.keys()

import matplotlib.pyplot as plt
plt.bar(x=cols,height=df1['City'].value_counts())
plt.show()

table = pd.crosstab(df1['Category'], df1['City'])
table.plot(kind="bar", figsize=(12,10))

# cek statika deskripsi dari dataset
df1.describe()

"""## Data Preprocessing"""

Total = df1.isnull().sum().sort_values(ascending=False)          

Percent = (df1.isnull().sum()*100/df1.isnull().count()).sort_values(ascending=False)   

missing_data = pd.concat([Total, Percent], axis = 1, keys = ['Total', 'Percentage of Missing Values'])    
missing_data

df1.duplicated().sum()

df1.drop(columns=['Coordinate', 'Lat', 'Long', 'Unnamed: 11',
       'Unnamed: 12', 'Time_Minutes', 'Rating', 'Description'], inplace=True)

df = df1.copy()

df.head()

"""## Modeling"""

from sklearn.feature_extraction.text import TfidfVectorizer

# Inisialisasi TfidfVectorizer
tf = TfidfVectorizer()
 
# Melakukan perhitungan idf pada data city
tf.fit(df['City']) 
 
# Mapping array dari fitur index integer ke fitur nama
tf.get_feature_names()

# Melakukan fit lalu ditransformasikan ke bentuk matrix
tfidf_matrix = tf.fit_transform(df['City']) 
 
# Melihat ukuran matrix tfidf
tfidf_matrix.shape

# Mengubah vektor tf-idf dalam bentuk matriks dengan fungsi todense()
tfidf_matrix.todense()

# Membuat dataframe untuk melihat tf-idf matrix
# Kolom diisi dengan nama kota
# Baris diisi dengan nama tempat wisata
 
pd.DataFrame(
    tfidf_matrix.todense(), 
    columns=tf.get_feature_names(),
    index=df.Place_Name
).sample(5, axis=1).sample(10, axis=0)

from sklearn.metrics.pairwise import cosine_similarity
 
# Menghitung cosine similarity pada matrix tf-idf
cosine_sim = cosine_similarity(tfidf_matrix) 
cosine_sim

# Membuat dataframe dari variabel cosine_sim dengan baris dan kolom berupa nama tempat wisata
cosine_sim_df = pd.DataFrame(cosine_sim, index=df['Place_Name'], columns=df['Place_Name'])
print('Shape:', cosine_sim_df.shape)
 
# Melihat similarity matrix pada setiap tempat wisata
cosine_sim_df.sample(5, axis=1).sample(10, axis=0)

df[df['Place_Name'] == "Bukit Jamur"]

df[df['Place_Name'] == "Curug Cilengkrang"]

def place_recommendations(place_name, similarity_data=cosine_sim_df, items=df[['Place_Name', 'City']], k=5):

    # Mengambil data dengan menggunakan argpartition untuk melakukan partisi secara tidak langsung sepanjang sumbu yang diberikan    
    # Dataframe diubah menjadi numpy
    # Range(start, stop, step)
    index = similarity_data.loc[:,place_name].to_numpy().argpartition(
        range(-1, -k, -1))
    
    # Mengambil data dengan similarity terbesar dari index yang ada
    closest = similarity_data.columns[index[-1:-(k+2):-1]]
    
    # Drop place_name agar place name yang dicari tidak muncul dalam daftar rekomendasi
    closest = closest.drop(place_name, errors='ignore')
 
    return pd.DataFrame(closest).merge(items).head(k)

df[df.Place_Name.eq('Surabaya North Quay')]

place_recommendations('Surabaya North Quay')

